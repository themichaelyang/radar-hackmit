'use strict';

var debug = false;
var displayCanvas = void 0;

function getVideo() {
  // consider setting the video constraints in the individual video media track within the stream
  var video = document.createElement('video');
  var userMediaConstraints = {
    // video: { width: 480, height: 270, facingMode: 'user' }, // set a framerate constraint?
    video: { width: 240, height: 135, facingMode: 'user' }, // set a framerate constraint?
    audio: false
  };

  navigator.mediaDevices.getUserMedia(userMediaConstraints).then(onGetUserMediaSuccess).catch(onGetUserMediaError);

  function onGetUserMediaSuccess(mediaStream) {
    video.src = window.URL.createObjectURL(mediaStream);
    video.play();
  }

  function onGetUserMediaError(error) {
    console.error(error);
  }

  document.body.appendChild(video);
  return video; // watch out! metadata doesnt load initially! its async
}

function getVideoFrame(video) {
  var canvas = document.createElement('canvas'); // consider reading raw img data from videos
  var ctx = canvas.getContext('2d');
  canvas.width = video.videoWidth;
  canvas.height = video.videoHeight;
  ctx.drawImage(video, 0, 0, canvas.width, canvas.height);
  return ctx;
}

function main() {
  // let r = Radar();
  // r.start();
  //
  // r.startLoop();
  displayCanvas = document.createElement('canvas');
  displayCanvas.width = 240;
  displayCanvas.height = 135;
  document.body.appendChild(displayCanvas);
  displayCanvasContext = displayCanvas.getContext('2d');
}

function Radar() {
  var fps = 30;
  var radar = new Object();
  var comparer = new ImageCompare();
  var previousFrame = void 0;

  radar.start = function () {
    radar.video = getVideo(); // change to promise interface?
  };

  radar.startLoop = function () {
    window.requestAnimationFrame(function () {
      loop();
    });
  };

  function loop() {
    // we should pass in time differences?
    var currentFrame = getVideoFrame(radar.video);
    process(currentFrame, previousFrame);

    previousFrame = currentFrame;

    window.setTimeout(function () {
      window.requestAnimationFrame(function () {
        loop();
      });
    }, 1000 / fps);
  }

  function process(currentFrame, previousFrame) {
    if (previousFrame) {
      // console.log(currentFrame.getImageData(0, 0, currentFrame.canvas.width, currentFrame.canvas.height).data);
      var xy = comparer.compare(currentFrame, previousFrame, 240, 135);
      console.log(xy);
      // console.log(currentFrame, previousFrame);
    }
  }

  return radar;
}

main();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZpZGVvLmpzIl0sIm5hbWVzIjpbImRlYnVnIiwiZGlzcGxheUNhbnZhcyIsImdldFZpZGVvIiwidmlkZW8iLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJ1c2VyTWVkaWFDb25zdHJhaW50cyIsIndpZHRoIiwiaGVpZ2h0IiwiZmFjaW5nTW9kZSIsImF1ZGlvIiwibmF2aWdhdG9yIiwibWVkaWFEZXZpY2VzIiwiZ2V0VXNlck1lZGlhIiwidGhlbiIsIm9uR2V0VXNlck1lZGlhU3VjY2VzcyIsImNhdGNoIiwib25HZXRVc2VyTWVkaWFFcnJvciIsIm1lZGlhU3RyZWFtIiwic3JjIiwid2luZG93IiwiVVJMIiwiY3JlYXRlT2JqZWN0VVJMIiwicGxheSIsImVycm9yIiwiY29uc29sZSIsImJvZHkiLCJhcHBlbmRDaGlsZCIsImdldFZpZGVvRnJhbWUiLCJjYW52YXMiLCJjdHgiLCJnZXRDb250ZXh0IiwidmlkZW9XaWR0aCIsInZpZGVvSGVpZ2h0IiwiZHJhd0ltYWdlIiwibWFpbiIsImRpc3BsYXlDYW52YXNDb250ZXh0IiwiUmFkYXIiLCJmcHMiLCJyYWRhciIsIk9iamVjdCIsImNvbXBhcmVyIiwiSW1hZ2VDb21wYXJlIiwicHJldmlvdXNGcmFtZSIsInN0YXJ0Iiwic3RhcnRMb29wIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwibG9vcCIsImN1cnJlbnRGcmFtZSIsInByb2Nlc3MiLCJzZXRUaW1lb3V0IiwieHkiLCJjb21wYXJlIiwibG9nIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFJQSxRQUFRLEtBQVo7QUFDQSxJQUFJQyxzQkFBSjs7QUFFQSxTQUFTQyxRQUFULEdBQW9CO0FBQ2xCO0FBQ0EsTUFBSUMsUUFBUUMsU0FBU0MsYUFBVCxDQUF1QixPQUF2QixDQUFaO0FBQ0EsTUFBSUMsdUJBQXVCO0FBQ3pCO0FBQ0FILFdBQU8sRUFBRUksT0FBTyxHQUFULEVBQWNDLFFBQVEsR0FBdEIsRUFBMkJDLFlBQVksTUFBdkMsRUFGa0IsRUFF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dCBkZWJ1ZyA9IGZhbHNlO1xubGV0IGRpc3BsYXlDYW52YXM7XG5cbmZ1bmN0aW9uIGdldFZpZGVvKCkge1xuICAvLyBjb25zaWRlciBzZXR0aW5nIHRoZSB2aWRlbyBjb25zdHJhaW50cyBpbiB0aGUgaW5kaXZpZHVhbCB2aWRlbyBtZWRpYSB0cmFjayB3aXRoaW4gdGhlIHN0cmVhbVxuICBsZXQgdmlkZW8gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd2aWRlbycpO1xuICBsZXQgdXNlck1lZGlhQ29uc3RyYWludHMgPSB7XG4gICAgLy8gdmlkZW86IHsgd2lkdGg6IDQ4MCwgaGVpZ2h0OiAyNzAsIGZhY2luZ01vZGU6ICd1c2VyJyB9LCAvLyBzZXQgYSBmcmFtZXJhdGUgY29uc3RyYWludD9cbiAgICB2aWRlbzogeyB3aWR0aDogMjQwLCBoZWlnaHQ6IDEzNSwgZmFjaW5nTW9kZTogJ3VzZXInIH0sIC8vIHNldCBhIGZyYW1lcmF0ZSBjb25zdHJhaW50P1xuICAgIGF1ZGlvOiBmYWxzZVxuICB9O1xuXG4gIG5hdmlnYXRvci5tZWRpYURldmljZXMuZ2V0VXNlck1lZGlhKHVzZXJNZWRpYUNvbnN0cmFpbnRzKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4ob25HZXRVc2VyTWVkaWFTdWNjZXNzKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmNhdGNoKG9uR2V0VXNlck1lZGlhRXJyb3IpO1xuXG4gIGZ1bmN0aW9uIG9uR2V0VXNlck1lZGlhU3VjY2VzcyhtZWRpYVN0cmVhbSkge1xuICAgIHZpZGVvLnNyYyA9IHdpbmRvdy5VUkwuY3JlYXRlT2JqZWN0VVJMKG1lZGlhU3RyZWFtKTtcbiAgICB2aWRlby5wbGF5KCk7XG4gIH1cblxuICBmdW5jdGlvbiBvbkdldFVzZXJNZWRpYUVycm9yKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcihlcnJvcik7XG4gIH1cblxuICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHZpZGVvKTtcbiAgcmV0dXJuIHZpZGVvOyAvLyB3YXRjaCBvdXQhIG1ldGFkYXRhIGRvZXNudCBsb2FkIGluaXRpYWxseSEgaXRzIGFzeW5jXG59XG5cbmZ1bmN0aW9uIGdldFZpZGVvRnJhbWUodmlkZW8pIHtcbiAgbGV0IGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpOyAvLyBjb25zaWRlciByZWFkaW5nIHJhdyBpbWcgZGF0YSBmcm9tIHZpZGVvc1xuICBsZXQgY3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG4gIGNhbnZhcy53aWR0aCA9IHZpZGVvLnZpZGVvV2lkdGg7XG4gIGNhbnZhcy5oZWlnaHQgPSB2aWRlby52aWRlb0hlaWdodDtcbiAgY3R4LmRyYXdJbWFnZSh2aWRlbywgMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KVxuICByZXR1cm4gY3R4O1xufVxuXG5mdW5jdGlvbiBtYWluKCkge1xuICAvLyBsZXQgciA9IFJhZGFyKCk7XG4gIC8vIHIuc3RhcnQoKTtcbiAgLy9cbiAgLy8gci5zdGFydExvb3AoKTtcbiAgZGlzcGxheUNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xuICBkaXNwbGF5Q2FudmFzLndpZHRoID0gMjQwO1xuICBkaXNwbGF5Q2FudmFzLmhlaWdodCA9IDEzNTtcbiAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChkaXNwbGF5Q2FudmFzKTtcbiAgZGlzcGxheUNhbnZhc0NvbnRleHQgPSBkaXNwbGF5Q2FudmFzLmdldENvbnRleHQoJzJkJyk7XG59XG5cbmZ1bmN0aW9uIFJhZGFyKCkge1xuICBsZXQgZnBzID0gMzA7XG4gIGxldCByYWRhciA9IG5ldyBPYmplY3QoKTtcbiAgbGV0IGNvbXBhcmVyID0gbmV3IEltYWdlQ29tcGFyZSgpO1xuICBsZXQgcHJldmlvdXNGcmFtZTtcblxuICByYWRhci5zdGFydCA9ICgpID0+IHtcbiAgICByYWRhci52aWRlbyA9IGdldFZpZGVvKCk7IC8vIGNoYW5nZSB0byBwcm9taXNlIGludGVyZmFjZT9cbiAgfVxuXG4gIHJhZGFyLnN0YXJ0TG9vcCA9ICgpID0+IHtcbiAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgIGxvb3AoKTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxvb3AoKSB7IC8vIHdlIHNob3VsZCBwYXNzIGluIHRpbWUgZGlmZmVyZW5jZXM/XG4gICAgbGV0IGN1cnJlbnRGcmFtZSA9IGdldFZpZGVvRnJhbWUocmFkYXIudmlkZW8pO1xuICAgIHByb2Nlc3MoY3VycmVudEZyYW1lLCBwcmV2aW91c0ZyYW1lKTtcblxuICAgIHByZXZpb3VzRnJhbWUgPSBjdXJyZW50RnJhbWU7XG5cbiAgICB3aW5kb3cuc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgbG9vcCgpO1xuICAgICAgfSlcbiAgICB9LCAxMDAwIC8gZnBzKTtcblxuICB9XG5cbiAgZnVuY3Rpb24gcHJvY2VzcyhjdXJyZW50RnJhbWUsIHByZXZpb3VzRnJhbWUpIHtcbiAgICBpZiAocHJldmlvdXNGcmFtZSkge1xuICAgICAgLy8gY29uc29sZS5sb2coY3VycmVudEZyYW1lLmdldEltYWdlRGF0YSgwLCAwLCBjdXJyZW50RnJhbWUuY2FudmFzLndpZHRoLCBjdXJyZW50RnJhbWUuY2FudmFzLmhlaWdodCkuZGF0YSk7XG4gICAgICBsZXQgeHkgPSBjb21wYXJlci5jb21wYXJlKGN1cnJlbnRGcmFtZSwgcHJldmlvdXNGcmFtZSwgMjQwLCAxMzUpO1xuICAgICAgY29uc29sZS5sb2coeHkpO1xuICAgICAgLy8gY29uc29sZS5sb2coY3VycmVudEZyYW1lLCBwcmV2aW91c0ZyYW1lKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmFkYXI7XG59XG5cbm1haW4oKTtcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
